AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: "AWS Lambda function that collects Cloudwatch Logs and sends them to Logz.io in bulk, over HTTP."
Parameters:
  logGroupName:
    Type: String
    Description: "The name of log group you want to ship logs from to Logz.io"
    MinLength: 1
  logzioToken:
    Type: String
    Description: "Your Logz.io log shipping token."
    MinLength: 1
  logzioListener:
    Type: String
    Description: >-
      The Logz.io listener URL fot your region. (For more details, see the regions page: 
      https://docs.logz.io/user-guide/accounts/account-region.html)
    Default: 'https://listener.logz.io:8071'
    AllowedValues:
      - 'https://listener.logz.io:8071'
      - 'https://listener-au.logz.io:8071'
      - 'https://listener-ca.logz.io:8071'
      - 'https://listener-eu.logz.io:8071'
      - 'https://listener-nl.logz.io:8071'
      - 'https://listener-uk.logz.io:8071'
      - 'https://listener-wa.logz.io:8071'
  logType:
    Type: String
    Description: >-
      The log type you'll use with this Lambda. This is shown in your logs under the type field in Kibana.
      Logz.io applies parsing based on type.
    Default: cloudwatch
  logLevel:
    Type: String
    Description: "Log level for the Lambda function. Can be one of: debug, info, warn, error, fatal, panic."
    Default: info
    AllowedValues:
      - debug
      - info
      - warn
      - error
      - fatal
      - panic
  compress:
    Type: String
    Description: "If true, the Lambda will send compressed logs. If false, the Lambda will send uncompressed logs."
    Default: true
    AllowedValues:
      - true
      - false
  sendAll:
    Type: String
    Description: "By default, we do not send logs of type START, END, REPORT. Choose true to send all log types."
    Default: false
    AllowedValues:
      - true
      - false
  additionalFields:
    Type: "String"
    Description: "Enriches the CloudWatch events with custom properties at ship time. The format is `key1=value1;key2=value2`. By default is empty."
    Default: ""

Outputs:
  LogzioCloudwatchShipperArn:
    Description: "Logz.io Cloudwatch shipper ARN"
    Value: !GetAtt LogzioCloudwatchShipper.Arn

Resources:
  LogzioCloudwatchShipper:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: go1.x
      Handler: main
      CodeUri:
        Bucket: logzio-aws-integrations-us-east-1
        Key: cloudwatch-shipper/0.0.1/function.zip
      FunctionName: !Ref AWS::StackName
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt CloudwatchShipperRole.Arn
      Events:
        CWLog:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: !Ref logGroupName
            FilterPattern: ""
      Environment:
        Variables:
          LOGZIO_TOKEN: !Ref logzioToken
          LOGZIO_LISTENER: !Ref logzioListener
          LOGZIO_TYPE: !Ref logType
          LOG_LEVEL: !Ref logLevel
          COMPRESS: !Ref compress
          SEND_ALL: !Ref sendAll
          ADDITIONAL_FIELDS: !Ref additionalFields
  CloudwatchShipperRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join [ '-', [ 'CloudwatchShipper', !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ] ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join [ '-', [ 'logzioS3Hook', !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ] ] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'