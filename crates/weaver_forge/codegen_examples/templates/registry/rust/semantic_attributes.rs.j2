{%- set file_name = ctx.prefix | snake_case -%}
{{- template.set_file_name(file_name ~ ".rs") -}}

/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */

{{ ctx.brief | comment_with_prefix("//! ") }}
{%- if ctx.note %}
//!
//! Notes:
{{ ctx.note | comment_with_prefix("///   ") }}
{%- endif %}
//! DO NOT EDIT, this is an Auto-generated file from templates/registry/rust/lib.rs.j2

use opentelemetry::StringValue;
use crate::AttributeKey;

{% for attribute in ctx.attributes %}

{%- if attribute.brief %}
{{ attribute.brief | comment_with_prefix("/// ") }}
{%- endif %}
{%- if attribute.note %}
///
/// Notes:
{{ attribute.note | comment_with_prefix("///   ") }}
{%- endif %}
{%- if attribute is experimental %}
#[cfg(feature = "semconv_experimental")]
{%- endif %}
{%- if attribute is deprecated %}
#[deprecated(note="{{ attribute.deprecated }}")]
{%- endif %}
{% if attribute.type.allow_custom_values is defined %}pub const {{ attribute.name | screaming_snake_case }}: AttributeKey<{{ attribute.name | pascal_case }}> = AttributeKey::new("{{ attribute.name }}");
{% elif attribute.type == "string" %}pub const {{ attribute.name | screaming_snake_case }}: AttributeKey<{{ attribute.type | type_mapping }}Value> = AttributeKey::new("{{ attribute.name }}");
{% else %}pub const {{ attribute.name | screaming_snake_case }}: AttributeKey<{{ attribute.type | type_mapping }}> = AttributeKey::new("{{ attribute.name }}");{% endif %}

{% if attribute.type.allow_custom_values is defined %}
{%- if attribute.brief %}
{{ attribute.brief | comment_with_prefix("/// ") }}
{%- endif %}
#[non_exhaustive]
pub enum {{ attribute.name | pascal_case }} {
{% for variant in attribute.type.members %}
    {%- if variant.brief %}{{ variant.brief | comment_with_prefix("    /// ") }}{% endif %}
    {%- if variant.note %}{{ variant.note | comment_with_prefix("    /// ") }}{% endif %}
    {%- if variant is experimental %}
    #[cfg(feature = "semconv_experimental")] {% endif %}
    {{ variant.id | pascal_case }},
{% endfor %}
}

impl {{ attribute.name | pascal_case }} {
    /// Returns the string representation of the [`{{ attribute.name | pascal_case }}`].
    pub fn as_str(&self) -> &'static str {
        match self {
        {%- for variant in attribute.type.members %}
            {%- if variant is experimental %}
            #[cfg(feature = "semconv_experimental")] {% endif %}
            {{ attribute.name | pascal_case }}::{{ variant.id | pascal_case }} => "{{ variant.value }}",
        {%- endfor %}
            /// Without this default case, the match expression would not
            /// contain any variants if all variants are annotated with the
            /// 'semconv_experimental' feature and the feature is not enabled.
            _ => unreachable!(),
        }
    }
}

impl core::fmt::Display for {{ attribute.name | pascal_case }} {
    /// Formats the value using the given formatter.
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}
{% endif %}
{% endfor %}