{%- if metric.brief %}
{{ metric.brief | comment_with_prefix("/// ") }}
{%- endif %}
{%- if metric is experimental %}
#[cfg(feature = "semconv_experimental")]
{%- endif %}
pub fn create_{{ metric.metric_name | snake_case }}<T>(meter: &opentelemetry::metrics::Meter) -> opentelemetry::metrics::Histogram<T>
    where opentelemetry::metrics::Meter: HistogramProvider<T> {
    meter.create_histogram("{{ metric.metric_name }}", "{{ metric.brief }}", "{{ metric.unit }}")
}

/// Metric: {{ metric.metric_name }}
/// Brief: {{ metric.brief }}
/// Unit: {{ metric.unit }}
#[derive(Debug)]
pub struct {{ metric.metric_name | pascal_case }}<T>(opentelemetry::metrics::Histogram<T>);

{% set required_attributes = metric.attributes | required %}
{% set optional_attributes = metric.attributes | optional %}

{% if required_attributes %}
/// Attributes for the `{{ metric.metric_name }}` metric.
#[derive(Debug, Clone)]
pub struct {{ metric.metric_name | pascal_case }}ReqAttributes {
    {% for attribute in metric.attributes %}
    {{- attribute.brief | comment_with_prefix("/// ") }}
    {%- if attribute.requirement_level == "required" %}
    {%- if attribute.type.members is defined %}
    pub {{ attribute.name | snake_case }}: crate::attributes::{{ attribute.name | attribute_namespace }}::{{ attribute.name | pascal_case }},
    {% else %}
    pub {{ attribute.name | snake_case }}: {{ attribute.type | type_mapping }},
    {% endif %}
    {%- else %}
    {%- if attribute.type.members is defined %}
    pub {{ attribute.name | snake_case }}: Option<crate::attributes::{{ attribute.name | attribute_namespace }}::{{ attribute.name | pascal_case }}>,
    {% else %}
    pub {{ attribute.name | snake_case }}: Option<{{ attribute.type | type_mapping }}>,
    {% endif %}
    {%- endif %}
    {%- endfor %}
}
{% endif %}
{% if optional_attributes %}
#[derive(Debug, Clone, Default)]
pub struct {{ metric.metric_name | pascal_case }}OptAttributes {
    {% for attribute in metric.attributes %}
    {{- attribute.brief | comment_with_prefix("/// ") }}
    {%- if attribute.requirement_level == "required" %}
    {%- if attribute.type.members is defined %}
    pub {{ attribute.name | snake_case }}: crate::attributes::{{ attribute.name | attribute_namespace }}::{{ attribute.name | pascal_case }},
    {% else %}
    pub {{ attribute.name | snake_case }}: {{ attribute.type | type_mapping }},
    {% endif %}
    {%- else %}
    {%- if attribute.type.members is defined %}
    pub {{ attribute.name | snake_case }}: Option<crate::attributes::{{ attribute.name | attribute_namespace }}::{{ attribute.name | pascal_case }}>,
    {% else %}
    pub {{ attribute.name | snake_case }}: Option<{{ attribute.type | type_mapping }}>,
    {% endif %}
    {%- endif %}
    {%- endfor %}
}
{% endif %}

impl <T> {{ metric.metric_name | pascal_case }}<T> {
    pub fn new(meter: &opentelemetry::metrics::Meter) -> Self
        where opentelemetry::metrics::Meter: HistogramProvider<T>{
        Self(meter.create_histogram("{{ metric.metric_name }}", "{{ metric.brief }}", "{{ metric.unit }}"))
    }

    /// Adds an additional value to the distribution.
    pub fn record(&self, value: T, attributes: {{ metric.metric_name | pascal_case }}Attributes) {
        // self.0.record(value, attributes.into())
    }
}